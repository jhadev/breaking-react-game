{"version":3,"sources":["components/GameCard/GameCard.js","components/Wrapper/Wrapper.js","components/Nav/Nav.js","components/Row.js","components/Col.js","components/Heading.js","App.js","index.js"],"names":["GameCard","props","react_default","a","createElement","className","value","id","onClick","handlePicked","alt","name","src","image","Wrapper","children","Nav","score","highScore","Row","concat","fluid","Col","allStyles","textAlign","margin","jumboStyles","padding","marginBottom","Heading","reactstrap_es","style","randomize","array","i","length","j","Math","floor","random","_ref","App","state","choices","picked","modal","toggle","_this","setState","indexOf","handleIncrement","console","log","handleReset","handleRandomize","randomizedChoices","currentScore","_this2","this","components_Wrapper_Wrapper","components_Nav_Nav","components_Heading","components_Row","map","choice","components_Col","key","components_GameCard_GameCard","isOpen","color","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.89b8f571.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./GameCard.css\";\n\nconst GameCard = props => (\n  <div \n  className=\"card\"\n  value={props.id}\n  onClick={() => props.handlePicked(props.id)}>\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default GameCard;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nconst Nav = props => (\r\n\r\n    <ul className=\"nav background text-light d-flex bd-highlight\">\r\n      <li className=\"mr-auto p-2 bd-highlight nav-item title\">\r\n      Breaking Bad Memory Game\r\n      </li>\r\n      <li className=\"nav-item score p-2 bd-highlight\">\r\n          Your Score: {props.score}\r\n      </li>\r\n      <li className=\"nav-item high-score p-2 bd-highlight\">\r\n          High Score: {props.highScore}\r\n      </li>\r\n    </ul>\r\n\r\n);\r\n\r\nexport default Nav;\r\n","import React from \"react\";\n\nconst Row = props => (\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>\n    {props.children}\n  </div>\n);\n\nexport default Row;\n","import React from \"react\";\n\nconst Col = props => {\n  return (\n    <div className=\"col\">\n      {props.children}\n    </div>\n  );\n};\n\nexport default Col;\n","import React from 'react';\nimport { Jumbotron } from 'reactstrap';\n\n\nconst allStyles = {\n  textAlign: 'center',\n  margin: 20\n}\n\nconst jumboStyles = {\n  padding: 20,\n  marginBottom: 5\n}\n\nconst Heading = (props) => {\n  return (\n    <div>\n      <Jumbotron style={jumboStyles}>\n          <h2 style={allStyles} className=\"display-6\">While this is a simple memory game, you don't want to pick the same character twice. Tread lightly...</h2>\n          <p className=\"lead text-center\">The characters will shuffle after every choice. Get 10 points and Heisenberg will spare you.</p>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default Heading;\n\n","import React, { Component } from \"react\";\nimport GameCard from \"./components/GameCard\";\nimport GameModal from \"./components/GameModal\";\nimport Wrapper from \"./components/Wrapper\";\nimport Nav from \"./components/Nav\";\nimport Row from \"./components/Row\";\nimport Col from \"./components/Col\";\nimport Heading from \"./components/Heading\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport choices from \"./choices.json\";\nimport \"./App.css\";\n\n//Durstenfield shuffle\n\nconst randomize = array => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nclass App extends Component {\n  //state object takes in our game choices, score, high score, and empty picked array\n\n  state = {\n    choices,\n    score: 0,\n    highScore: 0,\n    picked: [],\n    modal: false\n  };\n\n  //modal toggle method for reactstrap\n\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  };\n\n  /*toggleGameModal = () => {\n    this.setState({\n      gameModal: !this.state.gameModal\n    });\n  }*/\n\n  //method to check picks, takes in id.\n\n  handlePicked = id => {\n    //indexOf method returns -1 if value in an array never occurs.\n    //Will use this to determine if selection has been picked already.\n    //If the selection hasn't been picked already we will run handleIncrement method\n    //set the state using the concat() method to merge copied arrays.\n    //If the selection has been chosen already we will run the handleReset() method.\n\n    if (this.state.picked.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({ picked: this.state.picked.concat(id) });\n      console.log(this.state);\n    } else {\n      console.log(this.state);\n      this.toggle();\n      this.handleReset();\n    }\n  };\n\n  //handleReset method will set the state object back to original, retain the high score, and run the handleRandomize method\n  //toggle method sets the state of the modal\n\n  handleReset = () => {\n    this.setState({\n      score: 0,\n      highScore: this.state.highScore,\n      picked: []\n    });\n    this.toggle()\n    this.handleRandomize();\n  };\n\n  //handleRandomize method runs the randomize function and takes in our choices array.\n  //Then sets the state with our randomized array.\n\n  handleRandomize = () => {\n    let randomizedChoices = randomize(choices);\n    this.setState({ choices: randomizedChoices });\n  };\n\n  //method to handle score increment\n  handleIncrement = () => {\n    //increments the score property by one and stores it in the currentScore constant.\n    //Then runs the setState method to update the state object.\n\n    const currentScore = this.state.score + 1;\n    this.setState({\n      score: currentScore\n    });\n\n    //If the currentScore is greater than or equal to the high score in the state object\n    //then set the state of the high score to the current score.\n\n    if (currentScore >= this.state.highScore) {\n      this.setState({ highScore: currentScore });\n    }\n\n    //and if the currentScore is equal to the length of the choices array alert the user they have won.\n    if (currentScore === 10) {\n      //this.toggleGameModal();\n      this.toggle();\n    }\n\n    //run the randomize method\n\n    this.handleRandomize();\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Nav score={this.state.score} highScore={this.state.highScore} />\n        <Heading />\n        <div className=\"content\">\n          <Row>\n            {this.state.choices.map(choice => (\n              <Col key={choice.id}>\n                <GameCard\n                  key={choice.id}\n                  id={choice.id}\n                  image={choice.image}\n                  handlePicked={this.handlePicked}\n                  handleIncrement={this.handleIncrement}\n                  handleReset={this.handleReset}\n                  handleRandomize={this.handleRandomize}\n                />\n              </Col>\n            ))}\n          </Row>\n        </div>\n        <div>\n         <Modal\n            isOpen={this.state.modal}\n            toggle={this.toggle}\n            className={this.props.className}\n          >\n            <ModalHeader className=\"modalHeader\" toggle={this.toggle}>\n              {this.state.score === 10 ? \"CONGRATULATIONS!\" : \"NOT THIS TIME.\"}\n            </ModalHeader>\n            <ModalBody className=\"modalBody\">\n              {this.state.score === 10\n                ? <p>You won. You are the danger</p>\n                : <p>Better Call Saul and try again.</p>}\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"secondary\" onClick={this.toggle}>\n                Close\n              </Button>\n              <Button color=\"success\" onClick=\n              {this.handleReset} >\n                Play Again\n              </Button>\n            </ModalFooter>\n          </Modal>\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}